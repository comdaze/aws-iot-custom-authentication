"use strict";
/*
 * Invoked as part of the "build" script of this package,
 * this script takes all specification fragments in the
 * `spec-source` folder and generates a unified specification
 * document at `spec/specification.json`.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const md5 = require("md5");
const massage_spec_1 = require("./massage-spec");
async function main() {
    const inputDir = path.join(process.cwd(), 'spec-source');
    const files = await fs.readdir(inputDir);
    const spec = { PropertyTypes: {}, ResourceTypes: {}, Fingerprint: '' };
    for (const file of files.filter(n => n.endsWith('.json')).sort()) {
        const data = await fs.readJson(path.join(inputDir, file));
        if (file.indexOf('patch') === -1) {
            massage_spec_1.decorateResourceTypes(data);
            massage_spec_1.forEachSection(spec, data, massage_spec_1.merge);
        }
        else {
            massage_spec_1.forEachSection(spec, data, massage_spec_1.patch);
        }
    }
    massage_spec_1.massageSpec(spec);
    spec.Fingerprint = md5(JSON.stringify(massage_spec_1.normalize(spec)));
    const outDir = path.join(process.cwd(), 'spec');
    await fs.mkdirp(outDir);
    await fs.writeJson(path.join(outDir, 'specification.json'), spec, { spaces: 2 });
}
main()
    .catch(e => {
    // eslint-disable-next-line no-console
    console.error(e.stack);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidWlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7O0FBRUgsNkJBQTZCO0FBQzdCLCtCQUErQjtBQUMvQiwyQkFBMkI7QUFFM0IsaURBQTZHO0FBRTdHLEtBQUssVUFBVSxJQUFJO0lBQ2pCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxNQUFNLElBQUksR0FBeUIsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQzdGLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNoRSxNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDaEMsb0NBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsNkJBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLG9CQUFLLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0wsNkJBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLG9CQUFLLENBQUMsQ0FBQztTQUNuQztLQUNGO0lBRUQsMEJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QixNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuRixDQUFDO0FBRUQsSUFBSSxFQUFFO0tBQ0gsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ1Qsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBJbnZva2VkIGFzIHBhcnQgb2YgdGhlIFwiYnVpbGRcIiBzY3JpcHQgb2YgdGhpcyBwYWNrYWdlLFxuICogdGhpcyBzY3JpcHQgdGFrZXMgYWxsIHNwZWNpZmljYXRpb24gZnJhZ21lbnRzIGluIHRoZVxuICogYHNwZWMtc291cmNlYCBmb2xkZXIgYW5kIGdlbmVyYXRlcyBhIHVuaWZpZWQgc3BlY2lmaWNhdGlvblxuICogZG9jdW1lbnQgYXQgYHNwZWMvc3BlY2lmaWNhdGlvbi5qc29uYC5cbiAqL1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0ICogYXMgbWQ1IGZyb20gJ21kNSc7XG5pbXBvcnQgeyBzY2hlbWEgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgZGVjb3JhdGVSZXNvdXJjZVR5cGVzLCBmb3JFYWNoU2VjdGlvbiwgbWFzc2FnZVNwZWMsIG1lcmdlLCBub3JtYWxpemUsIHBhdGNoIH0gZnJvbSAnLi9tYXNzYWdlLXNwZWMnO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuICBjb25zdCBpbnB1dERpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnc3BlYy1zb3VyY2UnKTtcbiAgY29uc3QgZmlsZXMgPSBhd2FpdCBmcy5yZWFkZGlyKGlucHV0RGlyKTtcbiAgY29uc3Qgc3BlYzogc2NoZW1hLlNwZWNpZmljYXRpb24gPSB7IFByb3BlcnR5VHlwZXM6IHt9LCBSZXNvdXJjZVR5cGVzOiB7fSwgRmluZ2VycHJpbnQ6ICcnIH07XG4gIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcy5maWx0ZXIobiA9PiBuLmVuZHNXaXRoKCcuanNvbicpKS5zb3J0KCkpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZnMucmVhZEpzb24ocGF0aC5qb2luKGlucHV0RGlyLCBmaWxlKSk7XG4gICAgaWYgKGZpbGUuaW5kZXhPZigncGF0Y2gnKSA9PT0gLTEpIHtcbiAgICAgIGRlY29yYXRlUmVzb3VyY2VUeXBlcyhkYXRhKTtcbiAgICAgIGZvckVhY2hTZWN0aW9uKHNwZWMsIGRhdGEsIG1lcmdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaFNlY3Rpb24oc3BlYywgZGF0YSwgcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIG1hc3NhZ2VTcGVjKHNwZWMpO1xuXG4gIHNwZWMuRmluZ2VycHJpbnQgPSBtZDUoSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplKHNwZWMpKSk7XG5cbiAgY29uc3Qgb3V0RGlyID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdzcGVjJyk7XG4gIGF3YWl0IGZzLm1rZGlycChvdXREaXIpO1xuICBhd2FpdCBmcy53cml0ZUpzb24ocGF0aC5qb2luKG91dERpciwgJ3NwZWNpZmljYXRpb24uanNvbicpLCBzcGVjLCB7IHNwYWNlczogMiB9KTtcbn1cblxubWFpbigpXG4gIC5jYXRjaChlID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG4gICAgcHJvY2Vzcy5leGl0KC0xKTtcbiAgfSk7XG4iXX0=