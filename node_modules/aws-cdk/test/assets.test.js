"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assets_1 = require("../lib/assets");
const asset_manifest_builder_1 = require("../lib/util/asset-manifest-builder");
const util_1 = require("./util");
let toolkit;
let assets;
beforeEach(() => {
    toolkit = {
        bucketUrl: 'https://bucket',
        bucketName: 'bucket',
        prepareEcrRepository: jest.fn(),
    };
    assets = new asset_manifest_builder_1.AssetManifestBuilder();
});
describe('file assets', () => {
    test('convert to manifest and parameters', async () => {
        // GIVEN
        const stack = stackWithAssets([
            {
                sourceHash: 'source-hash',
                path: __filename,
                id: 'SomeStackSomeResource4567',
                packaging: 'file',
                s3BucketParameter: 'BucketParameter',
                s3KeyParameter: 'KeyParameter',
                artifactHashParameter: 'ArtifactHashParameter',
            },
        ]);
        // WHEN
        const params = await assets_1.addMetadataAssetsToManifest(stack, assets, toolkit);
        // THEN
        expect(params).toEqual({
            BucketParameter: 'bucket',
            KeyParameter: 'assets/SomeStackSomeResource4567/||source-hash.js',
            ArtifactHashParameter: 'source-hash',
        });
        expect(assets.toManifest('.').entries).toEqual([
            expect.objectContaining({
                destination: {
                    bucketName: 'bucket',
                    objectKey: 'assets/SomeStackSomeResource4567/source-hash.js',
                },
                source: {
                    packaging: 'file',
                    path: __filename,
                },
            }),
        ]);
    });
    test('hash and ID the same => only one path component', async () => {
        // GIVEN
        const stack = stackWithAssets([
            {
                sourceHash: 'source-hash',
                path: __filename,
                id: 'source-hash',
                packaging: 'file',
                s3BucketParameter: 'BucketParameter',
                s3KeyParameter: 'KeyParameter',
                artifactHashParameter: 'ArtifactHashParameter',
            },
        ]);
        // WHEN
        await assets_1.addMetadataAssetsToManifest(stack, assets, toolkit);
        // THEN
        expect(assets.toManifest('.').entries).toEqual([
            expect.objectContaining({
                destination: {
                    bucketName: 'bucket',
                    objectKey: 'assets/source-hash.js',
                },
            }),
        ]);
    });
    test('reuse', async () => {
        // GIVEN
        const stack = stackWithAssets([
            {
                path: __filename,
                id: 'SomeStackSomeResource4567',
                packaging: 'file',
                s3BucketParameter: 'BucketParameter',
                s3KeyParameter: 'KeyParameter',
                artifactHashParameter: 'ArtifactHashParameter',
                sourceHash: 'boom',
            },
        ]);
        // WHEN
        const params = await assets_1.addMetadataAssetsToManifest(stack, assets, toolkit, ['SomeStackSomeResource4567']);
        // THEN
        expect(params).toEqual({});
        expect(assets.toManifest('.').entries).toEqual([]);
    });
});
describe('docker assets', () => {
    test('parameter and no repository name (old)', async () => {
        // GIVEN
        const stack = stackWithAssets([
            {
                id: 'Stack:Construct/ABC123',
                imageNameParameter: 'MyParameter',
                packaging: 'container-image',
                path: '/foo',
                sourceHash: '0123456789abcdef',
            },
        ]);
        mockFn(toolkit.prepareEcrRepository).mockResolvedValue({ repositoryUri: 'docker.uri' });
        // WHEN
        const params = await assets_1.addMetadataAssetsToManifest(stack, assets, toolkit);
        // THEN
        expect(toolkit.prepareEcrRepository).toHaveBeenCalledWith('cdk/stack-construct-abc123');
        expect(params).toEqual({
            MyParameter: 'docker.uri:0123456789abcdef',
        });
        expect(assets.toManifest('.').entries).toEqual([
            expect.objectContaining({
                type: 'docker-image',
                destination: {
                    imageTag: '0123456789abcdef',
                    repositoryName: 'cdk/stack-construct-abc123',
                },
                source: {
                    directory: '/foo',
                },
            }),
        ]);
    });
    test('if parameter is left out then repo and tag are required', async () => {
        // GIVEN
        const stack = stackWithAssets([
            {
                id: 'Stack:Construct/ABC123',
                packaging: 'container-image',
                path: '/foo',
                sourceHash: '0123456789abcdef',
            },
        ]);
        await expect(assets_1.addMetadataAssetsToManifest(stack, assets, toolkit)).rejects.toThrow('Invalid Docker image asset');
    });
    test('no parameter and repo/tag name (new)', async () => {
        // GIVEN
        const stack = stackWithAssets([
            {
                id: 'Stack:Construct/ABC123',
                repositoryName: 'reponame',
                imageTag: '12345',
                packaging: 'container-image',
                path: '/foo',
                sourceHash: '0123456789abcdef',
            },
        ]);
        mockFn(toolkit.prepareEcrRepository).mockResolvedValue({ repositoryUri: 'docker.uri' });
        // WHEN
        const params = await assets_1.addMetadataAssetsToManifest(stack, assets, toolkit);
        // THEN
        expect(toolkit.prepareEcrRepository).toHaveBeenCalledWith('reponame');
        expect(params).toEqual({}); // No parameters!
        expect(assets.toManifest('.').entries).toEqual([
            expect.objectContaining({
                type: 'docker-image',
                destination: {
                    imageTag: '12345',
                    repositoryName: 'reponame',
                },
                source: {
                    directory: '/foo',
                },
            }),
        ]);
    });
    test('reuse', async () => {
        // GIVEN
        const stack = stackWithAssets([
            {
                path: __dirname,
                id: 'SomeStackSomeResource4567',
                packaging: 'container-image',
                imageNameParameter: 'asdf',
                sourceHash: 'source-hash',
            },
        ]);
        // WHEN
        const params = await assets_1.addMetadataAssetsToManifest(stack, assets, toolkit, ['SomeStackSomeResource4567']);
        // THEN
        expect(params).toEqual({});
        expect(assets.toManifest('.').entries).toEqual([]);
    });
});
function stackWithAssets(assetEntries) {
    return util_1.testStack({
        stackName: 'SomeStack',
        assets: assetEntries,
        template: {
            Resources: {
                SomeResource: {
                    Type: 'AWS::Something::Something',
                },
            },
        },
    });
}
function mockFn(fn) {
    if (!jest.isMockFunction(fn)) {
        throw new Error(`Not a mock function: ${fn}`);
    }
    return fn;
}
//# sourceMappingURL=data:application/json;base64,