"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.outputFromStack = exports.sleep = exports.retry = exports.isBucketMissingError = exports.isStackMissingError = exports.AwsClients = void 0;
const AWS = require("aws-sdk");
class AwsClients {
    constructor(region, output) {
        this.region = region;
        this.output = output;
        this.config = {
            credentials: chainableCredentials(this.region),
            region: this.region,
            maxRetries: 8,
            retryDelayOptions: { base: 500 },
            stsRegionalEndpoints: 'regional',
        };
        this.cloudFormation = makeAwsCaller(AWS.CloudFormation, this.config);
        this.s3 = makeAwsCaller(AWS.S3, this.config);
        this.ecr = makeAwsCaller(AWS.ECR, this.config);
        this.sns = makeAwsCaller(AWS.SNS, this.config);
        this.iam = makeAwsCaller(AWS.IAM, this.config);
        this.lambda = makeAwsCaller(AWS.Lambda, this.config);
        this.sts = makeAwsCaller(AWS.STS, this.config);
    }
    static async default(output) {
        var _a, _b;
        const region = (_b = (_a = process.env.AWS_REGION) !== null && _a !== void 0 ? _a : process.env.AWS_DEFAULT_REGION) !== null && _b !== void 0 ? _b : 'us-east-1';
        return AwsClients.forRegion(region, output);
    }
    static async forRegion(region, output) {
        return new AwsClients(region, output);
    }
    async account() {
        // Reduce # of retries, we use this as a circuit breaker for detecting no-config
        return (await new AWS.STS({ ...this.config, maxRetries: 1 }).getCallerIdentity().promise()).Account;
    }
    async deleteStacks(...stackNames) {
        if (stackNames.length === 0) {
            return;
        }
        for (const stackName of stackNames) {
            await this.cloudFormation('updateTerminationProtection', {
                EnableTerminationProtection: false,
                StackName: stackName,
            });
            await this.cloudFormation('deleteStack', {
                StackName: stackName,
            });
        }
        await retry(this.output, `Deleting ${stackNames}`, retry.forSeconds(600), async () => {
            for (const stackName of stackNames) {
                const status = await this.stackStatus(stackName);
                if (status !== undefined && status.endsWith('_FAILED')) {
                    throw retry.abort(new Error(`'${stackName}' is in state '${status}'`));
                }
                if (status !== undefined) {
                    throw new Error(`Delete of '${stackName}' not complete yet`);
                }
            }
        });
    }
    async stackStatus(stackName) {
        var _a;
        try {
            return (_a = (await this.cloudFormation('describeStacks', { StackName: stackName })).Stacks) === null || _a === void 0 ? void 0 : _a[0].StackStatus;
        }
        catch (e) {
            if (isStackMissingError(e)) {
                return undefined;
            }
            throw e;
        }
    }
    async emptyBucket(bucketName) {
        const objects = await this.s3('listObjects', { Bucket: bucketName });
        const deletes = (objects.Contents || []).map(obj => obj.Key || '').filter(d => !!d);
        if (deletes.length === 0) {
            return Promise.resolve();
        }
        return this.s3('deleteObjects', {
            Bucket: bucketName,
            Delete: {
                Objects: deletes.map(d => ({ Key: d })),
                Quiet: false,
            },
        });
    }
    async deleteImageRepository(repositoryName) {
        await this.ecr('deleteRepository', { repositoryName, force: true });
    }
    async deleteBucket(bucketName) {
        try {
            await this.emptyBucket(bucketName);
            await this.s3('deleteBucket', {
                Bucket: bucketName,
            });
        }
        catch (e) {
            if (isBucketMissingError(e)) {
                return;
            }
            throw e;
        }
    }
}
exports.AwsClients = AwsClients;
/**
 * Perform an AWS call from nothing
 *
 * Create the correct client, do the call and resole the promise().
 */
async function awsCall(ctor, config, call, request) {
    const cfn = new ctor(config);
    const response = cfn[call](request);
    try {
        return response.promise();
    }
    catch (e) {
        const newErr = new Error(`${call}(${JSON.stringify(request)}): ${e.message}`);
        newErr.code = e.code;
        throw newErr;
    }
}
/**
 * Factory function to invoke 'awsCall' for specific services.
 *
 * Not strictly necessary but calling this replaces a whole bunch of annoying generics you otherwise have to type:
 *
 * ```ts
 * export function cloudFormation<
 *   C extends keyof ServiceCalls<AWS.CloudFormation>,
 * >(call: C, request: First<ServiceCalls<AWS.CloudFormation>[C]>): Promise<Second<ServiceCalls<AWS.CloudFormation>[C]>> {
 *   return awsCall(AWS.CloudFormation, call, request);
 * }
 * ```
 */
function makeAwsCaller(ctor, config) {
    return (call, request) => {
        return awsCall(ctor, config, call, request);
    };
}
function isStackMissingError(e) {
    return e.message.indexOf('does not exist') > -1;
}
exports.isStackMissingError = isStackMissingError;
function isBucketMissingError(e) {
    return e.message.indexOf('does not exist') > -1;
}
exports.isBucketMissingError = isBucketMissingError;
/**
 * Retry an async operation until a deadline is hit.
 *
 * Use `retry.forSeconds()` to construct a deadline relative to right now.
 *
 * Exceptions will cause the operation to retry. Use `retry.abort` to annotate an exception
 * to stop the retry and end in a failure.
 */
async function retry(output, operation, deadline, block) {
    let i = 0;
    output.write(`💈 ${operation}\n`);
    while (true) {
        try {
            i++;
            const ret = await block();
            output.write(`💈 ${operation}: succeeded after ${i} attempts\n`);
            return ret;
        }
        catch (e) {
            if (e.abort || Date.now() > deadline.getTime()) {
                throw new Error(`${operation}: did not succeed after ${i} attempts: ${e}`);
            }
            output.write(`⏳ ${operation} (${e.message})\n`);
            await sleep(5000);
        }
    }
}
exports.retry = retry;
/**
 * Make a deadline for the `retry` function relative to the current time.
 */
retry.forSeconds = (seconds) => {
    return new Date(Date.now() + seconds * 1000);
};
/**
 * Annotate an error to stop the retrying
 */
retry.abort = (e) => {
    e.abort = true;
    return e;
};
async function sleep(ms) {
    return new Promise(ok => setTimeout(ok, ms));
}
exports.sleep = sleep;
function outputFromStack(key, stack) {
    var _a, _b;
    return (_b = ((_a = stack.Outputs) !== null && _a !== void 0 ? _a : []).find(o => o.OutputKey === key)) === null || _b === void 0 ? void 0 : _b.OutputValue;
}
exports.outputFromStack = outputFromStack;
function chainableCredentials(region) {
    const profileName = process.env.AWS_PROFILE;
    if (process.env.CODEBUILD_BUILD_ARN && profileName) {
        // in codebuild we must assume the role that the cdk uses
        // otherwise credentials will just be picked up by the normal sdk
        // heuristics and expire after an hour.
        // can't use '~' since the SDK doesn't seem to expand it...?
        const configPath = `${process.env.HOME}/.aws/config`;
        const ini = new AWS.IniLoader().loadFrom({
            filename: configPath,
            isConfig: true,
        });
        const profile = ini[profileName];
        if (!profile) {
            throw new Error(`Profile '${profileName}' does not exist in config file (${configPath})`);
        }
        const arn = profile.role_arn;
        const externalId = profile.external_id;
        if (!arn) {
            throw new Error(`role_arn does not exist in profile ${profileName}`);
        }
        if (!externalId) {
            throw new Error(`external_id does not exist in profile ${externalId}`);
        }
        return new AWS.ChainableTemporaryCredentials({
            params: {
                RoleArn: arn,
                ExternalId: externalId,
                RoleSessionName: 'integ-tests',
            },
            stsConfig: {
                region,
            },
            masterCredentials: new AWS.ECSCredentials(),
        });
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,