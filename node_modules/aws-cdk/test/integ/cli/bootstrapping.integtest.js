"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const cdk_1 = require("../helpers/cdk");
const test_helpers_1 = require("../helpers/test-helpers");
jest.setTimeout(600000);
test_helpers_1.integTest('can bootstrap without execution', cdk_1.withDefaultFixture(async (fixture) => {
    var _a;
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--no-execute']);
    const resp = await fixture.aws.cloudFormation('describeStacks', {
        StackName: bootstrapStackName,
    });
    expect((_a = resp.Stacks) === null || _a === void 0 ? void 0 : _a[0].StackStatus).toEqual('REVIEW_IN_PROGRESS');
}));
test_helpers_1.integTest('upgrade legacy bootstrap stack to new bootstrap stack while in use', cdk_1.withDefaultFixture(async (fixture) => {
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    const legacyBootstrapBucketName = `aws-cdk-bootstrap-integ-test-legacy-bckt-${cdk_1.randomString()}`;
    const newBootstrapBucketName = `aws-cdk-bootstrap-integ-test-v2-bckt-${cdk_1.randomString()}`;
    fixture.rememberToDeleteBucket(legacyBootstrapBucketName); // This one will leak
    fixture.rememberToDeleteBucket(newBootstrapBucketName); // This one shouldn't leak if the test succeeds, but let's be safe in case it doesn't
    // Legacy bootstrap
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--bootstrap-bucket-name', legacyBootstrapBucketName]);
    // Deploy stack that uses file assets
    await fixture.cdkDeploy('lambda', {
        options: ['--toolkit-stack-name', bootstrapStackName],
    });
    // Upgrade bootstrap stack to "new" style
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--bootstrap-bucket-name', newBootstrapBucketName,
        '--qualifier', fixture.qualifier,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess'], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // (Force) deploy stack again
    // --force to bypass the check which says that the template hasn't changed.
    await fixture.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--force',
        ],
    });
}));
test_helpers_1.integTest('can and deploy if omitting execution policies', cdk_1.withDefaultFixture(async (fixture) => {
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--qualifier', fixture.qualifier], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // Deploy stack that uses file assets
    await fixture.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--context', `@aws-cdk/core:bootstrapQualifier=${fixture.qualifier}`,
            '--context', '@aws-cdk/core:newStyleStackSynthesis=1',
        ],
    });
}));
test_helpers_1.integTest('deploy new style synthesis to new style bootstrap', cdk_1.withDefaultFixture(async (fixture) => {
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--qualifier', fixture.qualifier,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess'], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // Deploy stack that uses file assets
    await fixture.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--context', `@aws-cdk/core:bootstrapQualifier=${fixture.qualifier}`,
            '--context', '@aws-cdk/core:newStyleStackSynthesis=1',
        ],
    });
}));
test_helpers_1.integTest('deploy new style synthesis to new style bootstrap (with docker image)', cdk_1.withDefaultFixture(async (fixture) => {
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--qualifier', fixture.qualifier,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess'], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // Deploy stack that uses file assets
    await fixture.cdkDeploy('docker', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--context', `@aws-cdk/core:bootstrapQualifier=${fixture.qualifier}`,
            '--context', '@aws-cdk/core:newStyleStackSynthesis=1',
        ],
    });
}));
test_helpers_1.integTest('deploy old style synthesis to new style bootstrap', cdk_1.withDefaultFixture(async (fixture) => {
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--qualifier', fixture.qualifier,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess'], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // Deploy stack that uses file assets
    await fixture.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
        ],
    });
}));
test_helpers_1.integTest('deploying new style synthesis to old style bootstrap fails', cdk_1.withDefaultFixture(async (fixture) => {
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap', '--toolkit-stack-name', bootstrapStackName]);
    // Deploy stack that uses file assets, this fails because the bootstrap stack
    // is version checked.
    await expect(fixture.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--context', '@aws-cdk/core:newStyleStackSynthesis=1',
        ],
    })).rejects.toThrow('exited with error');
}));
test_helpers_1.integTest('can create a legacy bootstrap stack with --public-access-block-configuration=false', cdk_1.withDefaultFixture(async (fixture) => {
    var _a;
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack-1');
    await fixture.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName, '--public-access-block-configuration', 'false', '--tags', 'Foo=Bar']);
    const response = await fixture.aws.cloudFormation('describeStacks', { StackName: bootstrapStackName });
    expect((_a = response.Stacks) === null || _a === void 0 ? void 0 : _a[0].Tags).toEqual([
        { Key: 'Foo', Value: 'Bar' },
    ]);
}));
test_helpers_1.integTest('can create multiple legacy bootstrap stacks', cdk_1.withDefaultFixture(async (fixture) => {
    var _a;
    const bootstrapStackName1 = fixture.fullStackName('bootstrap-stack-1');
    const bootstrapStackName2 = fixture.fullStackName('bootstrap-stack-2');
    // deploy two toolkit stacks into the same environment (see #1416)
    // one with tags
    await fixture.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName1, '--tags', 'Foo=Bar']);
    await fixture.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName2]);
    const response = await fixture.aws.cloudFormation('describeStacks', { StackName: bootstrapStackName1 });
    expect((_a = response.Stacks) === null || _a === void 0 ? void 0 : _a[0].Tags).toEqual([
        { Key: 'Foo', Value: 'Bar' },
    ]);
}));
test_helpers_1.integTest('can dump the template, modify and use it to deploy a custom bootstrap stack', cdk_1.withDefaultFixture(async (fixture) => {
    let template = await fixture.cdk(['bootstrap', '--show-template'], {
        captureStderr: false,
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    expect(template).toContain('BootstrapVersion:');
    template += '\n' + [
        '  TwiddleDee:',
        '    Value: Template got twiddled',
    ].join('\n');
    const filename = path.join(fixture.integTestDir, `${fixture.qualifier}-template.yaml`);
    fs.writeFileSync(filename, template, { encoding: 'utf-8' });
    await fixture.cdk(['bootstrap',
        '--toolkit-stack-name', fixture.fullStackName('bootstrap-stack'),
        '--qualifier', fixture.qualifier,
        '--template', filename,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess'], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
}));
test_helpers_1.integTest('switch on termination protection, switch is left alone on re-bootstrap', cdk_1.withDefaultFixture(async (fixture) => {
    var _a;
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName,
        '--termination-protection', 'true',
        '--qualifier', fixture.qualifier,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess'], {
        modEnv: { CDK_NEW_BOOTSTRAP: '1' },
    });
    await fixture.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName, '--force'], { modEnv: { CDK_NEW_BOOTSTRAP: '1' } });
    const response = await fixture.aws.cloudFormation('describeStacks', { StackName: bootstrapStackName });
    expect((_a = response.Stacks) === null || _a === void 0 ? void 0 : _a[0].EnableTerminationProtection).toEqual(true);
}));
test_helpers_1.integTest('add tags, left alone on re-bootstrap', cdk_1.withDefaultFixture(async (fixture) => {
    var _a;
    const bootstrapStackName = fixture.fullStackName('bootstrap-stack');
    await fixture.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName,
        '--tags', 'Foo=Bar',
        '--qualifier', fixture.qualifier,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess'], {
        modEnv: { CDK_NEW_BOOTSTRAP: '1' },
    });
    await fixture.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName, '--force'], { modEnv: { CDK_NEW_BOOTSTRAP: '1' } });
    const response = await fixture.aws.cloudFormation('describeStacks', { StackName: bootstrapStackName });
    expect((_a = response.Stacks) === null || _a === void 0 ? void 0 : _a[0].Tags).toEqual([
        { Key: 'Foo', Value: 'Bar' },
    ]);
}));
//# sourceMappingURL=data:application/json;base64,