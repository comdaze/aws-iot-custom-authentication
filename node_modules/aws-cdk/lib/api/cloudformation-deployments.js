"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFormationDeployments = void 0;
const cxapi = require("@aws-cdk/cx-api");
const cdk_assets_1 = require("cdk-assets");
const logging_1 = require("../logging");
const asset_publishing_1 = require("../util/asset-publishing");
const aws_auth_1 = require("./aws-auth");
const deploy_stack_1 = require("./deploy-stack");
const toolkit_info_1 = require("./toolkit-info");
const cloudformation_1 = require("./util/cloudformation");
/**
 * Helper class for CloudFormation deployments
 *
 * Looks us the right SDK and Bootstrap stack to deploy a given
 * stack artifact.
 */
class CloudFormationDeployments {
    constructor(props) {
        this.sdkProvider = props.sdkProvider;
    }
    async readCurrentTemplate(stackArtifact) {
        logging_1.debug(`Reading existing template for stack ${stackArtifact.displayName}.`);
        const { stackSdk } = await this.prepareSdkFor(stackArtifact, undefined, aws_auth_1.Mode.ForReading);
        const cfn = stackSdk.cloudFormation();
        const stack = await cloudformation_1.CloudFormationStack.lookup(cfn, stackArtifact.stackName);
        return stack.template();
    }
    async deployStack(options) {
        const { stackSdk, resolvedEnvironment, cloudFormationRoleArn } = await this.prepareSdkFor(options.stack, options.roleArn);
        const toolkitInfo = await toolkit_info_1.ToolkitInfo.lookup(resolvedEnvironment, stackSdk, options.toolkitStackName);
        // Publish any assets before doing the actual deploy
        await this.publishStackAssets(options.stack, toolkitInfo);
        // Do a verification of the bootstrap stack version
        this.validateBootstrapStackVersion(options.stack.stackName, options.stack.requiresBootstrapStackVersion, toolkitInfo);
        return deploy_stack_1.deployStack({
            stack: options.stack,
            resolvedEnvironment,
            deployName: options.deployName,
            notificationArns: options.notificationArns,
            quiet: options.quiet,
            sdk: stackSdk,
            sdkProvider: this.sdkProvider,
            roleArn: cloudFormationRoleArn,
            reuseAssets: options.reuseAssets,
            toolkitInfo,
            tags: options.tags,
            execute: options.execute,
            force: options.force,
            parameters: options.parameters,
            usePreviousParameters: options.usePreviousParameters,
            progress: options.progress,
            ci: options.ci,
        });
    }
    async destroyStack(options) {
        const { stackSdk, cloudFormationRoleArn: roleArn } = await this.prepareSdkFor(options.stack, options.roleArn);
        return deploy_stack_1.destroyStack({
            sdk: stackSdk,
            roleArn,
            stack: options.stack,
            deployName: options.deployName,
            quiet: options.quiet,
        });
    }
    async stackExists(options) {
        var _a;
        const { stackSdk } = await this.prepareSdkFor(options.stack, undefined, aws_auth_1.Mode.ForReading);
        const stack = await cloudformation_1.CloudFormationStack.lookup(stackSdk.cloudFormation(), (_a = options.deployName) !== null && _a !== void 0 ? _a : options.stack.stackName);
        return stack.exists;
    }
    /**
     * Get the environment necessary for touching the given stack
     *
     * Returns the following:
     *
     * - The resolved environment for the stack (no more 'unknown-account/unknown-region')
     * - SDK loaded with the right credentials for calling `CreateChangeSet`.
     * - The Execution Role that should be passed to CloudFormation.
     */
    async prepareSdkFor(stack, roleArn, mode = aws_auth_1.Mode.ForWriting) {
        if (!stack.environment) {
            throw new Error(`The stack ${stack.displayName} does not have an environment`);
        }
        const resolvedEnvironment = await this.sdkProvider.resolveEnvironment(stack.environment);
        // Substitute any placeholders with information about the current environment
        const arns = await this.replaceEnvPlaceholders({
            assumeRoleArn: stack.assumeRoleArn,
            // Use the override if given, otherwise use the field from the stack
            cloudFormationRoleArn: roleArn !== null && roleArn !== void 0 ? roleArn : stack.cloudFormationExecutionRoleArn,
        }, resolvedEnvironment);
        const stackSdk = await this.sdkProvider.forEnvironment(resolvedEnvironment, mode, {
            assumeRoleArn: arns.assumeRoleArn,
        });
        return {
            stackSdk,
            resolvedEnvironment,
            cloudFormationRoleArn: arns.cloudFormationRoleArn,
        };
    }
    /**
     * Replace the {ACCOUNT} and {REGION} placeholders in all strings found in a complex object.
     */
    async replaceEnvPlaceholders(object, env) {
        return cxapi.EnvironmentPlaceholders.replaceAsync(object, {
            accountId: () => Promise.resolve(env.account),
            region: () => Promise.resolve(env.region),
            partition: async () => {
                var _a;
                // There's no good way to get the partition!
                // We should have had it already, except we don't.
                //
                // Best we can do is ask the "base credentials" for this environment for their partition. Cross-partition
                // AssumeRole'ing will never work anyway, so this answer won't be wrong (it will just be slow!)
                return (_a = (await this.sdkProvider.baseCredentialsPartition(env, aws_auth_1.Mode.ForReading))) !== null && _a !== void 0 ? _a : 'aws';
            },
        });
    }
    /**
     * Publish all asset manifests that are referenced by the given stack
     */
    async publishStackAssets(stack, bootstrapStack) {
        const stackEnv = await this.sdkProvider.resolveEnvironment(stack.environment);
        const assetArtifacts = stack.dependencies.filter(isAssetManifestArtifact);
        for (const assetArtifact of assetArtifacts) {
            this.validateBootstrapStackVersion(stack.stackName, assetArtifact.requiresBootstrapStackVersion, bootstrapStack);
            const manifest = cdk_assets_1.AssetManifest.fromFile(assetArtifact.file);
            await asset_publishing_1.publishAssets(manifest, this.sdkProvider, stackEnv);
        }
    }
    /**
     * Validate that the bootstrap stack has the right version for this stack
     */
    validateBootstrapStackVersion(stackName, requiresBootstrapStackVersion, bootstrapStack) {
        if (requiresBootstrapStackVersion === undefined) {
            return;
        }
        if (!bootstrapStack) {
            throw new Error(`${stackName}: publishing assets requires bootstrap stack version '${requiresBootstrapStackVersion}', no bootstrap stack found. Please run 'cdk bootstrap'.`);
        }
        if (requiresBootstrapStackVersion > bootstrapStack.version) {
            throw new Error(`${stackName}: publishing assets requires bootstrap stack version '${requiresBootstrapStackVersion}', found '${bootstrapStack.version}'. Please run 'cdk bootstrap' with a newer CLI version.`);
        }
    }
}
exports.CloudFormationDeployments = CloudFormationDeployments;
function isAssetManifestArtifact(art) {
    return art instanceof cxapi.AssetManifestArtifact;
}
//# sourceMappingURL=data:application/json;base64,