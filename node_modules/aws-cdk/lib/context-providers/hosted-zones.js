"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostedZoneContextProviderPlugin = void 0;
const cxapi = require("@aws-cdk/cx-api");
const api_1 = require("../api");
const logging_1 = require("../logging");
class HostedZoneContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    async getValue(args) {
        const account = args.account;
        const region = args.region;
        if (!this.isHostedZoneQuery(args)) {
            throw new Error(`HostedZoneProvider requires domainName property to be set in ${args}`);
        }
        const domainName = args.domainName;
        logging_1.debug(`Reading hosted zone ${account}:${region}:${domainName}`);
        const r53 = (await this.aws.forEnvironment(cxapi.EnvironmentUtils.make(account, region), api_1.Mode.ForReading)).route53();
        const response = await r53.listHostedZonesByName({ DNSName: domainName }).promise();
        if (!response.HostedZones) {
            throw new Error(`Hosted Zone not found in account ${account}, region ${region}: ${domainName}`);
        }
        const candidateZones = await this.filterZones(r53, response.HostedZones, args);
        if (candidateZones.length !== 1) {
            const filteProps = `dns:${domainName}, privateZone:${args.privateZone}, vpcId:${args.vpcId}`;
            throw new Error(`Found zones: ${JSON.stringify(candidateZones)} for ${filteProps}, but wanted exactly 1 zone`);
        }
        return {
            Id: candidateZones[0].Id,
            Name: candidateZones[0].Name,
        };
    }
    async filterZones(r53, zones, props) {
        let candidates = [];
        const domainName = props.domainName.endsWith('.') ? props.domainName : `${props.domainName}.`;
        logging_1.debug(`Found the following zones ${JSON.stringify(zones)}`);
        candidates = zones.filter(zone => zone.Name === domainName);
        logging_1.debug(`Found the following matched name zones ${JSON.stringify(candidates)}`);
        if (props.privateZone) {
            candidates = candidates.filter(zone => zone.Config && zone.Config.PrivateZone);
        }
        else {
            candidates = candidates.filter(zone => !zone.Config || !zone.Config.PrivateZone);
        }
        if (props.vpcId) {
            const vpcZones = [];
            for (const zone of candidates) {
                const data = await r53.getHostedZone({ Id: zone.Id }).promise();
                if (!data.VPCs) {
                    logging_1.debug(`Expected VPC for private zone but no VPC found ${zone.Id}`);
                    continue;
                }
                if (data.VPCs.map(vpc => vpc.VPCId).includes(props.vpcId)) {
                    vpcZones.push(zone);
                }
            }
            return vpcZones;
        }
        return candidates;
    }
    isHostedZoneQuery(props) {
        return props.domainName !== undefined;
    }
}
exports.HostedZoneContextProviderPlugin = HostedZoneContextProviderPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdGVkLXpvbmVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9zdGVkLXpvbmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHlDQUF5QztBQUN6QyxnQ0FBMkM7QUFDM0Msd0NBQW1DO0FBR25DLE1BQWEsK0JBQStCO0lBRTFDLFlBQTZCLEdBQWdCO1FBQWhCLFFBQUcsR0FBSCxHQUFHLENBQWE7SUFDN0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBcUM7UUFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM3QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxnRUFBZ0UsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN6RjtRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbkMsZUFBSyxDQUFDLHVCQUF1QixPQUFPLElBQUksTUFBTSxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDaEUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFVBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3JILE1BQU0sUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUU7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsT0FBTyxZQUFZLE1BQU0sS0FBSyxV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LENBQUM7Q0FDRjtBQWhFRCwwRUFnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeHNjaGVtYSBmcm9tICdAYXdzLWNkay9jbG91ZC1hc3NlbWJseS1zY2hlbWEnO1xuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IE1vZGUsIFNka1Byb3ZpZGVyIH0gZnJvbSAnLi4vYXBpJztcbmltcG9ydCB7IGRlYnVnIH0gZnJvbSAnLi4vbG9nZ2luZyc7XG5pbXBvcnQgeyBDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL3Byb3ZpZGVyJztcblxuZXhwb3J0IGNsYXNzIEhvc3RlZFpvbmVDb250ZXh0UHJvdmlkZXJQbHVnaW4gaW1wbGVtZW50cyBDb250ZXh0UHJvdmlkZXJQbHVnaW4ge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXdzOiBTZGtQcm92aWRlcikge1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFZhbHVlKGFyZ3M6IGN4c2NoZW1hLkhvc3RlZFpvbmVDb250ZXh0UXVlcnkpOiBQcm9taXNlPG9iamVjdD4ge1xuICAgIGNvbnN0IGFjY291bnQgPSBhcmdzLmFjY291bnQ7XG4gICAgY29uc3QgcmVnaW9uID0gYXJncy5yZWdpb247XG4gICAgaWYgKCF0aGlzLmlzSG9zdGVkWm9uZVF1ZXJ5KGFyZ3MpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEhvc3RlZFpvbmVQcm92aWRlciByZXF1aXJlcyBkb21haW5OYW1lIHByb3BlcnR5IHRvIGJlIHNldCBpbiAke2FyZ3N9YCk7XG4gICAgfVxuICAgIGNvbnN0IGRvbWFpbk5hbWUgPSBhcmdzLmRvbWFpbk5hbWU7XG4gICAgZGVidWcoYFJlYWRpbmcgaG9zdGVkIHpvbmUgJHthY2NvdW50fToke3JlZ2lvbn06JHtkb21haW5OYW1lfWApO1xuICAgIGNvbnN0IHI1MyA9IChhd2FpdCB0aGlzLmF3cy5mb3JFbnZpcm9ubWVudChjeGFwaS5FbnZpcm9ubWVudFV0aWxzLm1ha2UoYWNjb3VudCwgcmVnaW9uKSwgTW9kZS5Gb3JSZWFkaW5nKSkucm91dGU1MygpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcjUzLmxpc3RIb3N0ZWRab25lc0J5TmFtZSh7IEROU05hbWU6IGRvbWFpbk5hbWUgfSkucHJvbWlzZSgpO1xuICAgIGlmICghcmVzcG9uc2UuSG9zdGVkWm9uZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSG9zdGVkIFpvbmUgbm90IGZvdW5kIGluIGFjY291bnQgJHthY2NvdW50fSwgcmVnaW9uICR7cmVnaW9ufTogJHtkb21haW5OYW1lfWApO1xuICAgIH1cbiAgICBjb25zdCBjYW5kaWRhdGVab25lcyA9IGF3YWl0IHRoaXMuZmlsdGVyWm9uZXMocjUzLCByZXNwb25zZS5Ib3N0ZWRab25lcywgYXJncyk7XG4gICAgaWYgKGNhbmRpZGF0ZVpvbmVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgY29uc3QgZmlsdGVQcm9wcyA9IGBkbnM6JHtkb21haW5OYW1lfSwgcHJpdmF0ZVpvbmU6JHthcmdzLnByaXZhdGVab25lfSwgdnBjSWQ6JHthcmdzLnZwY0lkfWA7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZvdW5kIHpvbmVzOiAke0pTT04uc3RyaW5naWZ5KGNhbmRpZGF0ZVpvbmVzKX0gZm9yICR7ZmlsdGVQcm9wc30sIGJ1dCB3YW50ZWQgZXhhY3RseSAxIHpvbmVgKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgSWQ6IGNhbmRpZGF0ZVpvbmVzWzBdLklkLFxuICAgICAgTmFtZTogY2FuZGlkYXRlWm9uZXNbMF0uTmFtZSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBmaWx0ZXJab25lcyhcbiAgICByNTM6IEFXUy5Sb3V0ZTUzLCB6b25lczogQVdTLlJvdXRlNTMuSG9zdGVkWm9uZVtdLFxuICAgIHByb3BzOiBjeHNjaGVtYS5Ib3N0ZWRab25lQ29udGV4dFF1ZXJ5KTogUHJvbWlzZTxBV1MuUm91dGU1My5Ib3N0ZWRab25lW10+IHtcblxuICAgIGxldCBjYW5kaWRhdGVzOiBBV1MuUm91dGU1My5Ib3N0ZWRab25lW10gPSBbXTtcbiAgICBjb25zdCBkb21haW5OYW1lID0gcHJvcHMuZG9tYWluTmFtZS5lbmRzV2l0aCgnLicpID8gcHJvcHMuZG9tYWluTmFtZSA6IGAke3Byb3BzLmRvbWFpbk5hbWV9LmA7XG4gICAgZGVidWcoYEZvdW5kIHRoZSBmb2xsb3dpbmcgem9uZXMgJHtKU09OLnN0cmluZ2lmeSh6b25lcyl9YCk7XG4gICAgY2FuZGlkYXRlcyA9IHpvbmVzLmZpbHRlciggem9uZSA9PiB6b25lLk5hbWUgPT09IGRvbWFpbk5hbWUpO1xuICAgIGRlYnVnKGBGb3VuZCB0aGUgZm9sbG93aW5nIG1hdGNoZWQgbmFtZSB6b25lcyAke0pTT04uc3RyaW5naWZ5KGNhbmRpZGF0ZXMpfWApO1xuICAgIGlmIChwcm9wcy5wcml2YXRlWm9uZSkge1xuICAgICAgY2FuZGlkYXRlcyA9IGNhbmRpZGF0ZXMuZmlsdGVyKHpvbmUgPT4gem9uZS5Db25maWcgJiYgem9uZS5Db25maWcuUHJpdmF0ZVpvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYW5kaWRhdGVzID0gY2FuZGlkYXRlcy5maWx0ZXIoem9uZSA9PiAhem9uZS5Db25maWcgfHwgIXpvbmUuQ29uZmlnLlByaXZhdGVab25lKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZwY0lkKSB7XG4gICAgICBjb25zdCB2cGNab25lczogQVdTLlJvdXRlNTMuSG9zdGVkWm9uZVtdID0gW107XG4gICAgICBmb3IgKGNvbnN0IHpvbmUgb2YgY2FuZGlkYXRlcykge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcjUzLmdldEhvc3RlZFpvbmUoeyBJZDogem9uZS4gSWQgfSkucHJvbWlzZSgpO1xuICAgICAgICBpZiAoIWRhdGEuVlBDcykge1xuICAgICAgICAgIGRlYnVnKGBFeHBlY3RlZCBWUEMgZm9yIHByaXZhdGUgem9uZSBidXQgbm8gVlBDIGZvdW5kICR7em9uZS5JZH1gKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS5WUENzLm1hcCh2cGMgPT4gdnBjLlZQQ0lkKS5pbmNsdWRlcyhwcm9wcy52cGNJZCkpIHtcbiAgICAgICAgICB2cGNab25lcy5wdXNoKHpvbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdnBjWm9uZXM7XG4gICAgfVxuICAgIHJldHVybiBjYW5kaWRhdGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0hvc3RlZFpvbmVRdWVyeShwcm9wczogY3hzY2hlbWEuSG9zdGVkWm9uZUNvbnRleHRRdWVyeSB8IGFueSk6IHByb3BzIGlzIGN4c2NoZW1hLkhvc3RlZFpvbmVDb250ZXh0UXVlcnkge1xuICAgIHJldHVybiAocHJvcHMgYXMgY3hzY2hlbWEuSG9zdGVkWm9uZUNvbnRleHRRdWVyeSkuZG9tYWluTmFtZSAhPT0gdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=